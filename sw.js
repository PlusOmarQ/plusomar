// Minimal high-performance service worker
const CACHE='plusomar-v4',SIZE=20;self.addEventListener('install',e=>{self.skipWaiting()});self.addEventListener('activate',e=>{e.waitUntil((async()=>{try{const names=await caches.keys();await Promise.all(names.map(n=>n!==CACHE?caches.delete(n):null));await self.clients.claim()}catch(err){}})())});self.addEventListener('fetch',e=>{const{request:r}=e,u=new URL(r.url);if(r.method!=='GET'||!u.protocol.startsWith('http')||u.pathname.endsWith('sw.js')||u.origin!==location.origin)return;e.respondWith((async()=>{try{const res=await fetch(r);if(res&&res.status===200){const clone=res.clone();try{const cache=await caches.open(CACHE);await cache.put(r,clone);const keys=await cache.keys();if(keys.length>SIZE)await cache.delete(keys[0])}catch(e){}}return res}catch(e){try{const cached=await caches.match(r);if(cached)return cached}catch(e){}if(r.mode==='navigate')return new Response('<!DOCTYPE html><html><head><title>Offline</title><style>body{font-family:Arial,sans-serif;text-align:center;padding:50px;background:#212121;color:white}h1{color:#d26249}</style></head><body><h1>Offline</h1><p>Check your connection and try again.</p><button onclick="location.reload()">Retry</button></body></html>',{status:200,headers:{'Content-Type':'text/html;charset=utf-8'}});throw e}})())});